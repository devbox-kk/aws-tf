# Terragrunt Makefile
# AWS S3Áí∞Â¢É„ÅÆÁÆ°ÁêÜÁî®

.PHONY: help dev-plan dev-apply dev-apply-auto dev-destroy prod-plan prod-apply prod-apply-auto prod-destroy init clean validate format status dev-workflow

# „Éá„Éï„Ç©„É´„Éà„Çø„Éº„Ç≤„ÉÉ„Éà
help:
	@echo "Terragrunt S3„Éó„É≠„Ç∏„Çß„ÇØ„Éà ÁÆ°ÁêÜ„Ç≥„Éû„É≥„Éâ"
	@echo ""
	@echo "ÈñãÁô∫Áí∞Â¢É:"
	@echo "  make dev-plan      - ÈñãÁô∫Áí∞Â¢É„ÅÆ„Éó„É©„É≥„ÇíË°®Á§∫"
	@echo "  make dev-apply     - ÈñãÁô∫Áí∞Â¢É„Å´„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê"
	@echo "  make dev-apply-auto - ÈñãÁô∫Áí∞Â¢É„Å´„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàêÔºàËá™ÂãïÊâøË™çÔºâ"
	@echo "  make dev-destroy   - ÈñãÁô∫Áí∞Â¢É„ÅÆ„É™„ÇΩ„Éº„Çπ„ÇíÂâäÈô§"
	@echo ""
	@echo "Êú¨Áï™Áí∞Â¢É:"
	@echo "  make prod-plan     - Êú¨Áï™Áí∞Â¢É„ÅÆ„Éó„É©„É≥„ÇíË°®Á§∫"
	@echo "  make prod-apply    - Êú¨Áï™Áí∞Â¢É„Å´„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê"
	@echo "  make prod-apply-auto - Êú¨Áï™Áí∞Â¢É„Å´„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàêÔºàËá™ÂãïÊâøË™çÔºâ"
	@echo "  make prod-destroy  - Êú¨Áï™Áí∞Â¢É„ÅÆ„É™„ÇΩ„Éº„Çπ„ÇíÂâäÈô§"
	@echo ""
	@echo "Áí∞Â¢ÉÂ§âÊï∞:"
	@echo "  target=s3          - ÁâπÂÆö„ÅÆ„É¢„Ç∏„É•„Éº„É´Ôºàs3Ôºâ„ÅÆ„ÅøÂÆüË°å"
	@echo "  target=all         - ÂÖ®„É¢„Ç∏„É•„Éº„É´ÂÆüË°åÔºà„Éá„Éï„Ç©„É´„ÉàÔºâ"
	@echo ""
	@echo "‰ΩøÁî®‰æã:"
	@echo "  target=s3 make dev-plan    - S3„É¢„Ç∏„É•„Éº„É´„ÅÆ„Åø„Éó„É©„É≥"
	@echo "  target=all make dev-apply  - ÂÖ®„É¢„Ç∏„É•„Éº„É´ÈÅ©Áî®"
	@echo ""
	@echo "„Åù„ÅÆ‰ªñ:"
	@echo "  make init          - ÂøÖË¶Å„Å™ÂâçÊèêÊù°‰ª∂„Çí„ÉÅ„Çß„ÉÉ„ÇØ"
	@echo "  make validate      - Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆÊ§úË®º"
	@echo "  make format        - Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"
	@echo "  make clean         - Terragrunt/Terraform„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢"
	@echo "  make status        - ÂÖ®Áí∞Â¢É„ÅÆ„É™„ÇΩ„Éº„ÇπÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç"
	@echo "  make setup-state   - Terraform„Çπ„ÉÜ„Éº„ÉàÁî®„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê"
	@echo "  make dev-workflow  - ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆÂÆåÂÖ®„Å™„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÔºàplan‚ÜíapplyÔºâ"

# ÂâçÊèêÊù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ
init:
	@echo "=== ÂâçÊèêÊù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ ==="
	@command -v aws >/dev/null 2>&1 || { echo "AWS CLI„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"; exit 1; }
	@command -v terragrunt >/dev/null 2>&1 || { echo "Terragrunt„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"; exit 1; }
	@command -v terraform >/dev/null 2>&1 || { echo "Terraform„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"; exit 1; }
	@aws sts get-caller-identity >/dev/null 2>&1 || { echo "AWSË™çË®ºÊÉÖÂ†±„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"; exit 1; }
	@echo "‚úÖ ÂÖ®„Å¶„ÅÆÂâçÊèêÊù°‰ª∂„ÅåÊ∫Ä„Åü„Åï„Çå„Å¶„ÅÑ„Åæ„Åô"

# Terraform„Çπ„ÉÜ„Éº„ÉàÁî®„É™„ÇΩ„Éº„Çπ„ÅÆ‰ΩúÊàê
setup-state:
	@echo "=== Terraform„Çπ„ÉÜ„Éº„ÉàÁî®„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê‰∏≠ ==="
	@ACCOUNT_ID=$$(aws sts get-caller-identity --query Account --output text); \
	aws s3 mb s3://terraform-state-$$ACCOUNT_ID --region ap-northeast-1 2>/dev/null || echo "S3„Éê„Ç±„ÉÉ„Éà„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô"; \
	aws dynamodb describe-table --table-name terraform-state-lock --region ap-northeast-1 >/dev/null 2>&1 || \
	aws dynamodb create-table \
		--table-name terraform-state-lock \
		--attribute-definitions AttributeName=LockID,AttributeType=S \
		--key-schema AttributeName=LockID,KeyType=HASH \
		--provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
		--region ap-northeast-1
	@echo "‚úÖ „Çπ„ÉÜ„Éº„ÉàÁî®„É™„ÇΩ„Éº„Çπ„ÅÆÊ∫ñÂÇôÂÆå‰∫Ü"

# ÈñãÁô∫Áí∞Â¢É - „Éó„É©„É≥
dev-plan: init
	@echo "=== Terragrunt plan „ÇíÂÆüË°å‰∏≠ (Áí∞Â¢É: dev) ==="
	@export target=$${target:-all}; ./run.sh -e dev -a plan

# ÈñãÁô∫Áí∞Â¢É - ÈÅ©Áî®
dev-apply: init
	@echo "=== Terragrunt apply „ÇíÂÆüË°å‰∏≠ (Áí∞Â¢É: dev) ==="
	@export target=$${target:-all}; ./run.sh -e dev -a apply

# ÈñãÁô∫Áí∞Â¢É - ÈÅ©Áî®ÔºàËá™ÂãïÊâøË™çÔºâ
dev-apply-auto: init
	@echo "=== Terragrunt apply „ÇíÂÆüË°å‰∏≠ (Áí∞Â¢É: dev, Ëá™ÂãïÊâøË™ç) ==="
	@export target=$${target:-all}; ./run.sh -e dev -a apply -y

# ÈñãÁô∫Áí∞Â¢É - ÂâäÈô§
dev-destroy: init
	@if [ "$$CI" = "true" ] || [ "$$GITHUB_ACTIONS" = "true" ]; then \
		echo "‚ö†Ô∏è  ÈñãÁô∫Áí∞Â¢É„ÅÆ„É™„ÇΩ„Éº„Çπ„ÇíÂâäÈô§‰∏≠ÔºàCIÁí∞Â¢ÉÔºâ"; \
		export target=$${target:-all}; ./run.sh -e dev -a destroy -y; \
	else \
		echo "‚ö†Ô∏è  ÈñãÁô∫Áí∞Â¢É„ÅÆ„É™„ÇΩ„Éº„Çπ„ÇíÂâäÈô§„Åó„Çà„ÅÜ„Å®„Åó„Å¶„ÅÑ„Åæ„Åô"; \
		read -p "Á∂öË°å„Åó„Åæ„Åô„ÅãÔºü (y/N): " confirm && [ "$$confirm" = "y" ] || { echo "„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü"; exit 1; }; \
		export target=$${target:-all}; ./run.sh -e dev -a destroy -y; \
	fi

# Êú¨Áï™Áí∞Â¢É - „Éó„É©„É≥
prod-plan: init
	@echo "=== Terragrunt plan „ÇíÂÆüË°å‰∏≠ (Áí∞Â¢É: prod) ==="
	@export target=$${target:-all}; ./run.sh -e prod -a plan

# Êú¨Áï™Áí∞Â¢É - ÈÅ©Áî®
prod-apply: init
	@if [ "$$CI" = "true" ] || [ "$$GITHUB_ACTIONS" = "true" ]; then \
		echo "‚ö†Ô∏è  Êú¨Áï™Áí∞Â¢É„Å´„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê‰∏≠ÔºàCIÁí∞Â¢ÉÔºâ"; \
		export target=$${target:-all}; ./run.sh -e prod -a apply; \
	else \
		echo "‚ö†Ô∏è  Êú¨Áï™Áí∞Â¢É„Å´„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê„Åó„Çà„ÅÜ„Å®„Åó„Å¶„ÅÑ„Åæ„Åô"; \
		read -p "Á∂öË°å„Åó„Åæ„Åô„ÅãÔºü (y/N): " confirm && [ "$$confirm" = "y" ] || { echo "„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü"; exit 1; }; \
		export target=$${target:-all}; ./run.sh -e prod -a apply; \
	fi

# Êú¨Áï™Áí∞Â¢É - ÈÅ©Áî®ÔºàËá™ÂãïÊâøË™çÔºâ
prod-apply-auto: init
	@if [ "$$CI" = "true" ] || [ "$$GITHUB_ACTIONS" = "true" ]; then \
		echo "‚ö†Ô∏è  Êú¨Áï™Áí∞Â¢É„Å´„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê‰∏≠ÔºàCIÁí∞Â¢É„ÄÅËá™ÂãïÊâøË™çÔºâ"; \
		export target=$${target:-all}; ./run.sh -e prod -a apply -y; \
	else \
		echo "‚ö†Ô∏è  Êú¨Áï™Áí∞Â¢É„Å´„É™„ÇΩ„Éº„Çπ„Çí‰ΩúÊàê„Åó„Çà„ÅÜ„Å®„Åó„Å¶„ÅÑ„Åæ„ÅôÔºàËá™ÂãïÊâøË™çÔºâ"; \
		read -p "Á∂öË°å„Åó„Åæ„Åô„ÅãÔºü (y/N): " confirm && [ "$$confirm" = "y" ] || { echo "„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü"; exit 1; }; \
		export target=$${target:-all}; ./run.sh -e prod -a apply -y; \
	fi

# Êú¨Áï™Áí∞Â¢É - ÂâäÈô§
prod-destroy: init
	@if [ "$$CI" = "true" ] || [ "$$GITHUB_ACTIONS" = "true" ]; then \
		echo "üö® Êú¨Áï™Áí∞Â¢É„ÅÆ„É™„ÇΩ„Éº„Çπ„ÇíÂâäÈô§‰∏≠ÔºàCIÁí∞Â¢ÉÔºâ"; \
		export target=$${target:-all}; ./run.sh -e prod -a destroy -y; \
	else \
		echo "üö® Êú¨Áï™Áí∞Â¢É„ÅÆ„É™„ÇΩ„Éº„Çπ„ÇíÂâäÈô§„Åó„Çà„ÅÜ„Å®„Åó„Å¶„ÅÑ„Åæ„Åô"; \
		read -p "Êú¨ÂΩì„Å´Á∂öË°å„Åó„Åæ„Åô„ÅãÔºü (y/N): " confirm && [ "$$confirm" = "y" ] || { echo "„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü"; exit 1; }; \
		export target=$${target:-all}; ./run.sh -e prod -a destroy -y; \
	fi

# Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆÊ§úË®º
validate:
	@echo "=== Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆÊ§úË®º‰∏≠ ==="
	@find -name "*.hcl" -exec echo "Ê§úË®º‰∏≠: {}" \; -exec terragrunt hcl format --check {} \; || true
	@find -name "*.tf" -exec echo "Ê§úË®º‰∏≠: {}" \; -exec terraform fmt -check {} \; || true
	@echo "‚úÖ Ê§úË®ºÂÆå‰∫Ü"

# „Éï„Ç©„Éº„Éû„ÉÉ„Éà
format:
	@echo "=== „Éï„Ç°„Ç§„É´„Éï„Ç©„Éº„Éû„ÉÉ„Éà‰∏≠ ==="
	@find -name "*.hcl" -exec terragrunt hcl format {} \;
	@find -name "*.tf" -exec terraform fmt {} \;
	@echo "‚úÖ „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂÆå‰∫Ü"

# „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢
clean:
	@echo "=== „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢‰∏≠ ==="
	@find -name ".terragrunt-cache" -type d -exec rm -rf {} + 2>/dev/null || true
	@find -name ".terraform" -type d -exec rm -rf {} + 2>/dev/null || true
	@find -name "*.tfstate*" -type f -exec rm -f {} + 2>/dev/null || true
	@find -name ".terraform.lock.hcl" -type f -exec rm -f {} + 2>/dev/null || true
	@echo "‚úÖ „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢ÂÆå‰∫Ü"

# ÂÖ®Áí∞Â¢É„ÅÆ„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç
status:
	@echo "=== Áí∞Â¢É„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç ==="
	@echo "ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™: $$(pwd)"
	@echo "environments/dev„ÅÆÂÜÖÂÆπ:"
	@ls -la ./environments/dev || echo "ÈñãÁô∫Áí∞Â¢É„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
	@echo ""
	@TARGET=$${target:-all}; \
	if [ "$$TARGET" = "all" ]; then \
		echo "=== ÈñãÁô∫Áí∞Â¢É (ÂÖ®„É¢„Ç∏„É•„Éº„É´) ==="; \
		if [ -d "./environments/dev" ]; then \
			echo "„Éá„Ç£„É¨„ÇØ„Éà„É™: ./environments/dev"; \
			cd ./environments/dev && \
			( \
				STATE_OUTPUT=$$(terragrunt state list --terragrunt-non-interactive 2>&1); \
				STATE_EXIT_CODE=$$?; \
				if [ $$STATE_EXIT_CODE -eq 0 ] && echo "$$STATE_OUTPUT" | grep -q .; then \
					echo "„É™„ÇΩ„Éº„Çπ‰∏ÄË¶ß:"; \
					echo "$$STATE_OUTPUT" | sed 's/^/  /'; \
				else \
					if [ $$STATE_EXIT_CODE -ne 0 ]; then \
						echo "  ÂàùÊúüÂåñ„Ç®„É©„Éº (exit code: $$STATE_EXIT_CODE)"; \
						if [ "$$CI" = "true" ] || [ "$$GITHUB_ACTIONS" = "true" ]; then \
							echo "  „Ç®„É©„ÉºË©≥Á¥∞: $$STATE_OUTPUT"; \
						fi; \
					else \
						echo "  „É™„ÇΩ„Éº„Çπ„Å™„Åó„ÄÅ„Åæ„Åü„ÅØÂàùÊúüÂåñ„ÅåÂøÖË¶Å"; \
					fi; \
				fi; \
			); \
		else \
			echo "  ÈñãÁô∫Áí∞Â¢É„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì"; \
		fi; \
		echo ""; \
		echo "=== Êú¨Áï™Áí∞Â¢É (ÂÖ®„É¢„Ç∏„É•„Éº„É´) ==="; \
		if [ -d "./environments/prod" ]; then \
			echo "„Éá„Ç£„É¨„ÇØ„Éà„É™: ./environments/prod"; \
			cd ./environments/prod && \
			( \
				STATE_OUTPUT=$$(terragrunt state list --terragrunt-non-interactive 2>&1); \
				STATE_EXIT_CODE=$$?; \
				if [ $$STATE_EXIT_CODE -eq 0 ] && echo "$$STATE_OUTPUT" | grep -q .; then \
					echo "„É™„ÇΩ„Éº„Çπ‰∏ÄË¶ß:"; \
					echo "$$STATE_OUTPUT" | sed 's/^/  /'; \
				else \
					if [ $$STATE_EXIT_CODE -ne 0 ]; then \
						echo "  ÂàùÊúüÂåñ„Ç®„É©„Éº (exit code: $$STATE_EXIT_CODE)"; \
						if [ "$$CI" = "true" ] || [ "$$GITHUB_ACTIONS" = "true" ]; then \
							echo "  „Ç®„É©„ÉºË©≥Á¥∞: $$STATE_OUTPUT"; \
						fi; \
					else \
						echo "  „É™„ÇΩ„Éº„Çπ„Å™„Åó„ÄÅ„Åæ„Åü„ÅØÂàùÊúüÂåñ„ÅåÂøÖË¶Å"; \
					fi; \
				fi; \
			); \
		else \
			echo "  Êú¨Áï™Áí∞Â¢É„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì"; \
		fi; \
	else \
		echo "=== ÈñãÁô∫Áí∞Â¢É ($$TARGET „É¢„Ç∏„É•„Éº„É´) ==="; \
		if [ -d "./environments/dev/$$TARGET" ]; then \
			echo "„Éá„Ç£„É¨„ÇØ„Éà„É™: ./environments/dev/$$TARGET"; \
			cd "./environments/dev/$$TARGET" && \
			( \
				STATE_OUTPUT=$$(terragrunt state list --terragrunt-non-interactive 2>&1); \
				STATE_EXIT_CODE=$$?; \
				if [ $$STATE_EXIT_CODE -eq 0 ] && echo "$$STATE_OUTPUT" | grep -q .; then \
					echo "„É™„ÇΩ„Éº„Çπ‰∏ÄË¶ß:"; \
					echo "$$STATE_OUTPUT" | sed 's/^/  /'; \
				else \
					if [ $$STATE_EXIT_CODE -ne 0 ]; then \
						echo "  ÂàùÊúüÂåñ„Ç®„É©„Éº (exit code: $$STATE_EXIT_CODE)"; \
						if [ "$$CI" = "true" ] || [ "$$GITHUB_ACTIONS" = "true" ]; then \
							echo "  „Ç®„É©„ÉºË©≥Á¥∞: $$STATE_OUTPUT"; \
						fi; \
					else \
						echo "  „É™„ÇΩ„Éº„Çπ„Å™„Åó„ÄÅ„Åæ„Åü„ÅØÂàùÊúüÂåñ„ÅåÂøÖË¶Å"; \
					fi; \
				fi; \
			); \
		else \
			echo "  „É¢„Ç∏„É•„Éº„É´„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì: ./environments/dev/$$TARGET"; \
		fi; \
		echo ""; \
		echo "=== Êú¨Áï™Áí∞Â¢É ($$TARGET „É¢„Ç∏„É•„Éº„É´) ==="; \
		if [ -d "./environments/prod/$$TARGET" ]; then \
			echo "„Éá„Ç£„É¨„ÇØ„Éà„É™: ./environments/prod/$$TARGET"; \
			cd "./environments/prod/$$TARGET" && \
			( \
				STATE_OUTPUT=$$(terragrunt state list --terragrunt-non-interactive 2>&1); \
				STATE_EXIT_CODE=$$?; \
				if [ $$STATE_EXIT_CODE -eq 0 ] && echo "$$STATE_OUTPUT" | grep -q .; then \
					echo "„É™„ÇΩ„Éº„Çπ‰∏ÄË¶ß:"; \
					echo "$$STATE_OUTPUT" | sed 's/^/  /'; \
				else \
					if [ $$STATE_EXIT_CODE -ne 0 ]; then \
						echo "  ÂàùÊúüÂåñ„Ç®„É©„Éº (exit code: $$STATE_EXIT_CODE)"; \
						if [ "$$CI" = "true" ] || [ "$$GITHUB_ACTIONS" = "true" ]; then \
							echo "  „Ç®„É©„ÉºË©≥Á¥∞: $$STATE_OUTPUT"; \
						fi; \
					else \
						echo "  „É™„ÇΩ„Éº„Çπ„Å™„Åó„ÄÅ„Åæ„Åü„ÅØÂàùÊúüÂåñ„ÅåÂøÖË¶Å"; \
					fi; \
				fi; \
			); \
		else \
			echo "  „É¢„Ç∏„É•„Éº„É´„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì: ./environments/prod/$$TARGET"; \
		fi; \
	fi

# ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆÂÆåÂÖ®„Å™„ÉØ„Éº„ÇØ„Éï„É≠„Éº
dev-workflow: dev-plan
	@echo "ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„Éó„É©„É≥Á¢∫Ë™ç„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"
	@read -p "ÈÅ©Áî®„Åó„Åæ„Åô„ÅãÔºü (y/N): " confirm && [ "$$confirm" = "y" ] && export target=$${target:-all} && make dev-apply || echo "„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü"
