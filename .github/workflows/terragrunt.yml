name: Terragrunt CI/CD

on:
  # ÊâãÂãïÂÆüË°åÔºàplan, apply, destroyÔºâ
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terragrunt action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      target:
        description: 'Target module (optional)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - s3
      auto_approve:
        description: 'Auto approve for apply/destroy'
        required: false
        default: false
        type: boolean

  # „Éó„É´„É™„ÇØ„Ç®„Çπ„ÉàÊôÇ„ÅØËá™Âãï„ÅßplanÂÆüË°å
  pull_request:
    branches: [main, master]
    paths:
      - 'terragrunt/**'

  # ÊØéÊó•18ÊôÇ„Å´devÁí∞Â¢É„ÅÆdestroyÂÆüË°å
  schedule:
    - cron: '0 18 * * *'  # UTC 18:00 (JST 03:00)

  # „Éó„ÉÉ„Ç∑„É•ÊôÇ„ÅØdevÁí∞Â¢É„ÅßplanÂÆüË°å
  push:
    branches: [main, master]
    paths:
      - 'terragrunt/**'

env:
  AWS_DEFAULT_REGION: ap-northeast-1
  TF_INPUT: false
  TF_IN_AUTOMATION: true

jobs:
  terragrunt:
    name: Terragrunt ${{ github.event.inputs.action || 'plan' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terragrunt

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0

    - name: Setup Terragrunt
      run: |
        wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v0.53.0/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
        terragrunt --version

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Setup environment variables
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "ACTION=destroy" >> $GITHUB_ENV
          echo "TARGET=all" >> $GITHUB_ENV
          echo "AUTO_APPROVE=true" >> $GITHUB_ENV
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "ACTION=${{ github.event.inputs.action }}" >> $GITHUB_ENV
          echo "TARGET=${{ github.event.inputs.target }}" >> $GITHUB_ENV
          echo "AUTO_APPROVE=${{ github.event.inputs.auto_approve }}" >> $GITHUB_ENV
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "ACTION=plan" >> $GITHUB_ENV
          echo "TARGET=all" >> $GITHUB_ENV
          echo "AUTO_APPROVE=false" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "ACTION=plan" >> $GITHUB_ENV
          echo "TARGET=all" >> $GITHUB_ENV
          echo "AUTO_APPROVE=false" >> $GITHUB_ENV
        fi

    - name: Initialize Terragrunt
      run: make init

    - name: Setup state resources
      run: make setup-state
      if: env.ACTION != 'destroy'

    - name: Validate configuration
      run: make validate
      if: env.ACTION == 'plan'

    - name: Format check
      run: |
        make format
        if [ -n "$(git status --porcelain)" ]; then
          echo "Files were formatted. Please commit the changes."
          git diff
          exit 1
        fi
      if: env.ACTION == 'plan' && github.event_name == 'pull_request'

    - name: Terragrunt Plan
      run: |
        export target=${{ env.TARGET }}
        if [ "${{ env.ENVIRONMENT }}" = "dev" ]; then
          make dev-plan
        else
          make prod-plan
        fi
      if: env.ACTION == 'plan'

    - name: Terragrunt Apply
      run: |
        export target=${{ env.TARGET }}
        if [ "${{ env.ENVIRONMENT }}" = "dev" ]; then
          if [ "${{ env.AUTO_APPROVE }}" = "true" ]; then
            make dev-apply-auto
          else
            make dev-apply
          fi
        else
          if [ "${{ env.AUTO_APPROVE }}" = "true" ]; then
            make prod-apply-auto
          else
            make prod-apply
          fi
        fi
      if: env.ACTION == 'apply'

    - name: Terragrunt Destroy
      run: |
        export target=${{ env.TARGET }}
        if [ "${{ env.ENVIRONMENT }}" = "dev" ]; then
          make dev-destroy
        else
          make prod-destroy
        fi
      if: env.ACTION == 'destroy'

    - name: Show status
      run: |
        export target=${{ env.TARGET }}
        make status
      if: always()

    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && env.ACTION == 'plan'
      with:
        script: |
          const output = `#### Terragrunt Plan üó∫Ô∏è
          **Environment:** \`${{ env.ENVIRONMENT }}\`
          **Target:** \`${{ env.TARGET }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
