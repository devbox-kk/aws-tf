name: Terragrunt CI/CD

on:
  # 手動実行（plan, apply, destroy）
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terragrunt action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      target:
        description: 'Target module (optional)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - s3
      auto_approve:
        description: 'Auto approve for apply/destroy'
        required: false
        default: false
        type: boolean

  # プルリクエスト時は自動でplan実行
  pull_request:
    branches: [main, master]
    paths:
      - 'terragrunt/**'

  # プッシュ時はdev環境でplan実行
  push:
    branches: [main, master]
    paths:
      - 'terragrunt/**'

  # 毎日18時にdev環境のdestroy実行
  schedule:
    - cron: '0 18 * * *'  # UTC 18:00 (JST 03:00)

env:
  AWS_DEFAULT_REGION: ap-northeast-1
  TF_INPUT: false
  TF_IN_AUTOMATION: true

jobs:
  terragrunt:
    name: Terragrunt ${{ github.event.inputs.action || 'plan' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terragrunt

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify workspace structure
      run: |
        echo "=== ワークスペース構造確認 ==="
        echo "Root directory:"
        ls -la
        echo ""
        echo "Terragrunt directory:"
        cd terragrunt && ls -la
        echo ""
        echo "Environments:"
        ls -la terragrunt/environments/ || echo "environments not found"
        echo ""
        echo "Dev environment:"
        ls -la terragrunt/environments/dev/ || echo "dev not found"
        echo ""
        echo "Prod environment:"
        ls -la terragrunt/environments/prod/ || echo "prod not found"
      working-directory: .

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6.0

    - name: Setup Terragrunt
      run: |
        wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v0.82.3/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
        terragrunt --version

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Verify AWS credentials
      run: |
        echo "Testing AWS credentials..."
        aws sts get-caller-identity
        aws s3 ls || echo "No S3 access or no buckets"

    - name: Initialize Terragrunt
      run: |
        echo "=== 初期化前の状態確認 ==="
        ls -la
        ls -la environments/ || echo "environments/ not found"
        echo ""
        echo "=== 初期化実行 ==="
        make init

    - name: Setup state resources
      run: make setup-state
      if: github.event.inputs.action != 'destroy' && github.event_name != 'schedule'

    - name: Validate configuration
      run: make validate
      if: github.event.inputs.action == 'plan' || github.event_name == 'pull_request' || github.event_name == 'push'

    - name: Format check
      run: |
        make format
        if [ -n "$(git status --porcelain)" ]; then
          echo "Files were formatted. Please commit the changes."
          git diff
          exit 1
        fi
      if: github.event_name == 'pull_request'

    # Plan実行
    - name: Terragrunt Plan (Dev)
      run: |
        export target=${{ github.event.inputs.target || 'all' }}
        make dev-plan
      if: |
        (github.event.inputs.action == 'plan' && github.event.inputs.environment == 'dev') ||
        github.event_name == 'pull_request' ||
        github.event_name == 'push'

    - name: Terragrunt Plan (Prod)
      run: |
        export target=${{ github.event.inputs.target || 'all' }}
        make prod-plan
      if: github.event.inputs.action == 'plan' && github.event.inputs.environment == 'prod'

    # Apply実行
    - name: Terragrunt Apply (Dev)
      run: |
        export target=${{ github.event.inputs.target || 'all' }}
        if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
          make dev-apply-auto
        else
          make dev-apply
        fi
      if: github.event.inputs.action == 'apply' && github.event.inputs.environment == 'dev'

    - name: Terragrunt Apply (Prod)
      run: |
        export target=${{ github.event.inputs.target || 'all' }}
        if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
          make prod-apply-auto
        else
          make prod-apply
        fi
      if: github.event.inputs.action == 'apply' && github.event.inputs.environment == 'prod'

    # Destroy実行
    - name: Terragrunt Destroy (Dev)
      run: |
        export target=${{ github.event.inputs.target || 'all' }}
        make dev-destroy
      if: github.event.inputs.action == 'destroy' && github.event.inputs.environment == 'dev'

    - name: Terragrunt Destroy (Prod)
      run: |
        export target=${{ github.event.inputs.target || 'all' }}
        make prod-destroy
      if: github.event.inputs.action == 'destroy' && github.event.inputs.environment == 'prod'

    - name: Show status
      run: |
        export target=${{ github.event.inputs.target || 'all' }}
        echo "=== デバッグ情報 ==="
        echo "Working directory: $(pwd)"
        echo "Available directories:"
        ls -la environments/ || echo "environments/ not found"
        echo "Target: $target"
        echo "CI: $CI"
        echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
        echo ""
        echo "=== ステータス確認実行 ==="
        make status
      if: always()

    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const output = `#### Terragrunt Plan 🗺️
          **Environment:** dev
          **Target:** ${{ github.event.inputs.target || 'all' }}
          **Triggered by:** ${{ github.event_name }}
          
          <details><summary>Show Plan Details</summary>
          
          Plan実行が完了しました。詳細はActionsログを確認してください。
          
          </details>
          
          *Pusher: @${{ github.actor }}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  # 定期実行用の別ジョブ
  scheduled-destroy:
    name: Scheduled Destroy (Dev)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    defaults:
      run:
        working-directory: terragrunt

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify workspace structure (scheduled)
      run: |
        echo "=== ワークスペース構造確認（スケジュール実行） ==="
        echo "Root directory:"
        ls -la
        echo ""
        echo "Terragrunt directory:"
        cd terragrunt && ls -la
        echo ""
        echo "Environments:"
        ls -la terragrunt/environments/ || echo "environments not found"
      working-directory: .

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6.0

    - name: Setup Terragrunt
      run: |
        wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v0.82.3/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
        terragrunt --version

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Initialize Terragrunt
      run: |
        echo "=== 初期化前の状態確認（スケジュール実行） ==="
        ls -la
        ls -la environments/ || echo "environments/ not found"
        echo ""
        echo "=== 初期化実行 ==="
        make init

    - name: Check resources before destroy
      run: |
        export target=all
        echo "=== 削除前のリソース確認 ==="
        echo "Available environments:"
        ls -la environments/ || echo "environments/ not found"
        make status

    - name: Destroy dev environment
      run: |
        export target=all
        echo "=== Dev環境のリソースを削除中 ==="
        make dev-destroy

    - name: Verify destruction
      run: |
        export target=all
        echo "=== 削除後の確認 ==="
        make status
