name: AWS Credentials Test

on:
  # 手動実行のみ
  workflow_dispatch:
    inputs:
      detailed_check:
        description: 'Perform detailed AWS permissions check'
        required: false
        default: true
        type: boolean

env:
  AWS_DEFAULT_REGION: ap-northeast-1

jobs:
  test-credentials:
    name: Test AWS Credentials
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Check if secrets exist
      run: |
        echo "=== GitHub Secrets Verification ==="
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "❌ AWS_ACCESS_KEY_ID secret is NOT set"
          echo "::error::AWS_ACCESS_KEY_ID secret is missing"
          exit 1
        else
          echo "✅ AWS_ACCESS_KEY_ID secret is set"
          echo "   Value starts with: $(echo '${{ secrets.AWS_ACCESS_KEY_ID }}' | cut -c1-4)..."
        fi
        
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "❌ AWS_SECRET_ACCESS_KEY secret is NOT set"
          echo "::error::AWS_SECRET_ACCESS_KEY secret is missing"
          exit 1
        else
          echo "✅ AWS_SECRET_ACCESS_KEY secret is set"
          echo "   Length: $(echo '${{ secrets.AWS_SECRET_ACCESS_KEY }}' | wc -c) characters"
        fi

    - name: Test basic AWS authentication
      run: |
        echo "=== Basic AWS Authentication Test ==="
        echo "Testing STS GetCallerIdentity..."
        
        if aws sts get-caller-identity; then
          echo "✅ AWS authentication successful"
          
          # アカウント情報を取得
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          USER_ARN=$(aws sts get-caller-identity --query Arn --output text)
          USER_ID=$(aws sts get-caller-identity --query UserId --output text)
          
          echo ""
          echo "📋 Account Information:"
          echo "   Account ID: $ACCOUNT_ID"
          echo "   User ARN: $USER_ARN"
          echo "   User ID: $USER_ID"
        else
          echo "❌ AWS authentication failed"
          echo "::error::Cannot authenticate to AWS with provided credentials"
          exit 1
        fi

    - name: Test S3 permissions
      run: |
        echo "=== S3 Permissions Test ==="
        
        # S3バケット一覧の取得テスト
        echo "Testing S3 ListBuckets permission..."
        if aws s3 ls > /dev/null 2>&1; then
          echo "✅ S3 ListBuckets permission: OK"
          
          # 既存バケットの表示
          BUCKET_COUNT=$(aws s3 ls | wc -l)
          echo "   Found $BUCKET_COUNT existing buckets"
          
          if [ $BUCKET_COUNT -gt 0 ]; then
            echo "   Existing buckets:"
            aws s3 ls | head -5 | sed 's/^/     /'
            if [ $BUCKET_COUNT -gt 5 ]; then
              echo "     ... and $((BUCKET_COUNT - 5)) more"
            fi
          fi
        else
          echo "⚠️  S3 ListBuckets permission: Limited or denied"
        fi
        
        # Terraformステート用バケットの確認
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        STATE_BUCKET="terraform-state-$ACCOUNT_ID"
        
        echo ""
        echo "Testing Terraform state bucket access..."
        echo "   Checking bucket: $STATE_BUCKET"
        
        if aws s3 ls "s3://$STATE_BUCKET" > /dev/null 2>&1; then
          echo "✅ Terraform state bucket access: OK"
          echo "   Bucket exists and is accessible"
        else
          echo "ℹ️  Terraform state bucket: Not found (will be created when needed)"
        fi

    - name: Test DynamoDB permissions
      run: |
        echo "=== DynamoDB Permissions Test ==="
        
        # DynamoDBテーブル一覧の取得テスト
        echo "Testing DynamoDB ListTables permission..."
        if aws dynamodb list-tables --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
          echo "✅ DynamoDB ListTables permission: OK"
          
          # 既存テーブルの確認
          TABLE_COUNT=$(aws dynamodb list-tables --region $AWS_DEFAULT_REGION --query 'length(TableNames)' --output text)
          echo "   Found $TABLE_COUNT existing tables"
          
          if [ $TABLE_COUNT -gt 0 ]; then
            echo "   Existing tables:"
            aws dynamodb list-tables --region $AWS_DEFAULT_REGION --query 'TableNames' --output text | tr '\t' '\n' | head -5 | sed 's/^/     /'
          fi
        else
          echo "⚠️  DynamoDB ListTables permission: Limited or denied"
        fi
        
        # Terraformロック用テーブルの確認
        echo ""
        echo "Testing Terraform lock table access..."
        echo "   Checking table: terraform-state-lock"
        
        if aws dynamodb describe-table --table-name terraform-state-lock --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
          echo "✅ Terraform lock table access: OK"
          echo "   Table exists and is accessible"
        else
          echo "ℹ️  Terraform lock table: Not found (will be created when needed)"
        fi

    - name: Test IAM permissions (detailed)
      if: github.event.inputs.detailed_check == 'true'
      run: |
        echo "=== Detailed IAM Permissions Test ==="
        
        # 現在のユーザー情報
        echo "Current user/role information:"
        aws sts get-caller-identity --query '{Account:Account,Arn:Arn,UserId:UserId}' --output table
        
        echo ""
        echo "Testing specific permissions required for Terraform..."
        
        # S3権限のテスト
        echo ""
        echo "🔍 S3 Permissions:"
        
        # CreateBucket権限のテスト（実際には作成しない）
        TEST_BUCKET_NAME="terraform-test-$(date +%s)-deleteme"
        echo "   Testing S3 CreateBucket permission..."
        
        if aws s3 mb "s3://$TEST_BUCKET_NAME" --region $AWS_DEFAULT_REGION 2>/dev/null; then
          echo "   ✅ S3 CreateBucket: OK"
          # テストバケットを削除
          aws s3 rb "s3://$TEST_BUCKET_NAME" --force 2>/dev/null || true
        else
          echo "   ⚠️  S3 CreateBucket: May be restricted"
        fi
        
        # DynamoDB権限のテスト
        echo ""
        echo "🔍 DynamoDB Permissions:"
        echo "   Testing DynamoDB DescribeTable permission..."
        
        # 存在しないテーブルでDescribeTableをテスト
        if aws dynamodb describe-table --table-name "non-existent-table-test" --region $AWS_DEFAULT_REGION 2>&1 | grep -q "ResourceNotFoundException"; then
          echo "   ✅ DynamoDB DescribeTable: OK (ResourceNotFoundException is expected)"
        else
          echo "   ⚠️  DynamoDB DescribeTable: May have permission issues"
        fi

    - name: Test Terragrunt prerequisites
      run: |
        echo "=== Terragrunt Prerequisites Test ==="
        
        # AWS CLI バージョン
        echo "AWS CLI version:"
        aws --version
        
        echo ""
        echo "AWS configuration:"
        echo "   Default region: $AWS_DEFAULT_REGION"
        echo "   Current region: $(aws configure get region || echo 'Not set')"
        
        echo ""
        echo "Terraform state management readiness:"
        
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        STATE_BUCKET="terraform-state-$ACCOUNT_ID"
        LOCK_TABLE="terraform-state-lock"
        
        echo "   State bucket: $STATE_BUCKET"
        echo "   Lock table: $LOCK_TABLE"
        echo "   Region: $AWS_DEFAULT_REGION"
        
        # 必要なリソースの存在確認
        echo ""
        echo "Resource availability check:"
        
        if aws s3 ls "s3://$STATE_BUCKET" > /dev/null 2>&1; then
          echo "   ✅ State bucket exists"
        else
          echo "   📝 State bucket needs to be created"
        fi
        
        if aws dynamodb describe-table --table-name "$LOCK_TABLE" --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
          echo "   ✅ Lock table exists"
        else
          echo "   📝 Lock table needs to be created"
        fi

    - name: Generate permissions report
      if: always()
      run: |
        echo "=== Permissions Summary Report ==="
        echo ""
        echo "✅ Successful operations:"
        echo "   - AWS STS GetCallerIdentity"
        
        # S3テスト結果
        if aws s3 ls > /dev/null 2>&1; then
          echo "   - S3 ListBuckets"
        fi
        
        # DynamoDBテスト結果  
        if aws dynamodb list-tables --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
          echo "   - DynamoDB ListTables"
        fi
        
        echo ""
        echo "📋 Ready for Terragrunt operations:"
        
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        STATE_BUCKET="terraform-state-$ACCOUNT_ID"
        LOCK_TABLE="terraform-state-lock"
        
        # 状態バケットの確認
        if aws s3 ls "s3://$STATE_BUCKET" > /dev/null 2>&1; then
          echo "   ✅ Terraform state bucket ready"
        else
          echo "   📝 Run 'make setup-state' to create state bucket"
        fi
        
        # ロックテーブルの確認
        if aws dynamodb describe-table --table-name "$LOCK_TABLE" --region $AWS_DEFAULT_REGION > /dev/null 2>&1; then
          echo "   ✅ Terraform lock table ready"
        else
          echo "   📝 Run 'make setup-state' to create lock table"
        fi
        
        echo ""
        echo "🎯 Next steps:"
        echo "   1. If all tests passed, your credentials are properly configured"
        echo "   2. Run the main Terragrunt workflow to perform infrastructure operations"
        echo "   3. Check AWS IAM policies if any permissions failed"
        
        echo ""
        echo "🔗 Useful links:"
        echo "   - AWS IAM Console: https://console.aws.amazon.com/iam/"
        echo "   - AWS S3 Console: https://console.aws.amazon.com/s3/"
        echo "   - AWS DynamoDB Console: https://console.aws.amazon.com/dynamodb/"
